# -*- coding: utf-8 -*-
# 中文对齐不能用python自带的函数，需要自己根据中文长度增/减空格
# Python 2.7.12 & matplotlib 2.0.0

import re
from urllib2 import *
import matplotlib.pyplot as plt

#Get a set of records from nba.hupu.com due to given team
def getDataSet(team):
    statUserAgent = 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36'
    statHeaders = {'User-Agent': statUserAgent}

    statRequest = Request('https://nba.hupu.com/schedule/' + team, headers=statHeaders)
    statResponse = urlopen(statRequest, timeout = 10)

    statHtml = statResponse.read()

    #Load Game information using regular expression
    statPattern = re.compile(
        '''<tr.*?<a.*?>(.*?)</a>.*?>(.*?)</a>.*?<td.*?>(.*?)</td>.*?<td.*?>(.*?)</td>.*?<td.*?>(.*?)</td>.*?</tr>''',
        re.S)
    #store all the records that corresponds to the RE rule
    statDataSet = re.findall(statPattern, statHtml)
    return statDataSet

class Record:
    # initialization
    def __init__(self, team):
        self.team = team    #Name of the team in Chinese
        self.num = 0        #Number of the game
        self.place = ''     #Home/Road
        self.done = True    #True is the game is finished, else False
        self.result = ''    #The result of the game in Chinese
        self.opp = ''       #Opppnent of the game in Chinese
        self.score = ''     #The score of 2 teams in string like " XX:XX"
        self.scoreSelf = '' #The score of team
        self.scoreOpp = ''  #The score of opponent
        self.scoreDiff = 0  #The difference in scores (positive if win/negative if lose)
        self.dateTime = ''  #The date and time of this game (Beijing Time) in string
        self.date = ''      #The date of this game
        self.time = ''      #The time of this game

    # Load seperated data from a list generated by regular expression decomposing
    def Load(self, statRecord, count):
        #Get the number of this game record
        self.num = count

        #if this games is unfinished
        if statRecord[3].strip() == '-':
            self.done = False
            #To find out if it is a Home Game or a Road Game
            if statRecord[0] == self.team:
                self.place = '客'
                self.opp = statRecord[1]
            else:
                self.place = '主'
                self.opp = statRecord[0]

        #if the game is finished
        else:
            #Get the result of this game
            if statRecord[3].strip() == '胜':
                self.result = '胜'
            else:
                self.result = '负'

            if statRecord[0] == self.team:
                self.place = '客'
                self.opp = statRecord[1]
                #Get the score of this game
                self.scoreSelf = re.findall(r'^\d+', statRecord[2].strip())[0]
                self.scoreOpp = re.findall(r'\d+$', statRecord[2].strip())[0]
                self.score = self.scoreSelf + '-' + self.scoreOpp
            else:
                self.place = '主'
                self.opp = statRecord[0]

                self.scoreSelf = re.findall(r'\d+$', statRecord[2].strip())[0]
                self.scoreOpp = re.findall(r'^\d+', statRecord[2].strip())[0]
                self.score = self.scoreOpp + '-' + self.scoreSelf
            self.scoreDiff = eval(self.scoreSelf) - eval(self.scoreOpp)

        #Get the date and time of this game
        self.dateTime = statRecord[4]
        self.date = self.dateTime.split()[0]
        self.time = self.dateTime.split()[1]

    # Print game message
    def Print(self):
        #Trick here to fill in suitable spaces to align Chinese
        spaceExtraSelf = '  '
        spaceExtraOpp = '  '
        if len(self.team) == 9: spaceExtraSelf = '   '
        if len(self.team) == 5: spaceExtraSelf = ' '
        if len(self.opp) == 9: spaceExtraOpp = '   '
        if len(self.opp) == 5: spaceExtraOpp = ' '
        if self.done == True:
            if self.place == '客':
                print ('Game %2s %s%10s VS %-10s%s %3s : %3s  %+4d  %s' % (
                self.num, spaceExtraSelf, self.team, self.opp, spaceExtraOpp, self.scoreSelf, self.scoreOpp,
                self.scoreDiff, self.dateTime))
            if self.place == '主':
                print ('Game %2s %s%10s VS %-10s%s %3s : %3s  %+4d  %s' % (
                self.num, spaceExtraOpp, self.opp, self.team, spaceExtraSelf, self.scoreOpp, self.scoreSelf,
                self.scoreDiff, self.dateTime))
        else:
            if self.place == '客':
                print ('Game %2s %s%10s VS %-10s%s                  %s' % (
                self.num, spaceExtraSelf, self.team, self.opp, spaceExtraOpp, self.dateTime))
            if self.place == '主':
                print ('Game %2s %s%10s VS %-10s%s                  %s' % (
                self.num, spaceExtraOpp, self.opp, self.team, spaceExtraSelf, self.dateTime))


if __name__ == "__main__":
    #Dictionary of team's English and Chinese names
    #We need english names to implement url and Chinese name to print in Console
    teams = {'spurs': '马刺', 'rockets': '火箭', 'grizzlies': '灰熊', 'pelicans':'鹈鹕', 'mavericks':'小牛',
             'warriors': '勇士', 'clippers':'快船', 'kings': '国王', 'lakers': '湖人', 'suns': '太阳',
             'jazz': '爵士', 'thunder': '雷霆', 'blazers': '开拓者', 'nuggets': '掘金', 'timberwolves': '森林狼',
             'celtics': '凯尔特人', 'raptors': '猛龙', 'knicks': '尼克斯', '76ers': '76人', 'nets': '篮网',
             'wizards': '奇才', 'hawks': '老鹰', 'heat': '热火', 'hornets': '黄蜂', 'magic': '魔术',
             'cavaliers': '骑士', 'bucks':'雄鹿', 'bulls': '公牛', 'pacers': '步行者', 'pistons': '活塞'}

    for team in teams:
        #Comment this if and unindent codes below to get all 30 team's results
        if team == 'rockets':
            statDataSet = getDataSet(team)
            countGame = 0
            countWin = 0
            countLose = 0
            streak = ''
            streakCount = 0
            results = []

            #Count Wins and Loses and print every record
            for statRecord in statDataSet:
                countGame += 1
                record = Record(teams[team])
                record.Load(statRecord, countGame)
                if record.done == True:
                    results.append(record.scoreDiff)
                    if record.result == '胜':
                        countWin += 1
                    else:
                        countLose += 1
                record.Print()

            #Reverse the records to check the Win/Lose streak
            statDataSet.reverse()
            for statRecord in statDataSet:
                record = Record(teams[team])
                record.Load(statRecord, countGame)
                if streak == '':
                    streak = record.result
                    streakCount = 1
                    continue
                if record.result == streak:
                    streakCount += 1
                else:
                    break

            #Plot results one by one
            x = range(0, len(results))
            figure = plt.figure()
            plt.plot(x, results, 'r-', alpha = 0.6, label = 'dot')
            plt.plot(x, results, 'ro', label = 'line')
            plt.title(team.upper() + '  +/-  Overall' )
            plt.xlabel('Game NO.')
            plt.ylabel('+/-')
            plt.grid(True)
            figure.set_size_inches(12,4)
            plt.legend(loc = 'upper right')
            plt.show()

            print('Total : %d W / %d L %d 连%s中' % (countWin, countLose, streakCount, streak))
